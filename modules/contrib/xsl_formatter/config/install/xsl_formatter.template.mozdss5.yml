langcode: en
status: true
dependencies: {  }
id: mozdss5
label: mozDss5
description: "Mozilla transformation for nested view"
xsl: "<?xml version=\"1.0\"?>\n<!--\n                                                                                \n ***** BEGIN LICENSE BLOCK *****                                                \n   - Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          \n   -                                                                            \n   - The contents of this file are subject to the Mozilla Public License Version\n   - 1.1 (the \"License\"); you may not use this file except in compliance with   \n   - the License. You may obtain a copy of the License at                       \n   - http://www.mozilla.org/MPL/                                                \n   -                                                                            \n   - Software distributed under the License is distributed on an \"AS IS\" basis, \n   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   \n   - for the specific language governing rights and limitations under the       \n   - License.                                                                   \n   -                                                                            \n   - The Original Code is mozilla.org code.                                     \n   -                                                                            \n   - The Initial Developer of the Original Code is                              \n   - Netscape Communications Corporation.                                       \n   - Portions created by the Initial Developer are Copyright (C) 2002           \n   - the Initial Developer. All Rights Reserved.                                \n   -                                                                            \n   - Contributor(s):                                                            \n   -   Jonas Sicking <sicking@bigfoot.com> (Original author)                    \n   -                                                                            \n   - Alternatively, the contents of this file may be used under the terms of    \n   - either the GNU General Public License Version 2 or later (the \"GPL\"), or   \n   - the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),   \n   - in which case the provisions of the GPL or the LGPL are applicable instead \n   - of those above. If you wish to allow use of your version of this file only \n   - under the terms of either the GPL or the LGPL, and not to allow others to  \n   - use your version of this file under the terms of the MPL, indicate your    \n   - decision by deleting the provisions above and replace them with the notice \n   - and other provisions required by the LGPL or the GPL. If you do not delete \n   - the provisions above, a recipient may use your version of this file under  \n   - the terms of any one of the MPL, the GPL or the LGPL.                      \n   -                                                                            \n   - ***** END LICENSE BLOCK *****                                              \n-->\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">  \n  \n  <xsl:param name=\"selectedNodes\" select=\"@comment()\"/>\n  <xsl:param name=\"scalarExpr\" select=\"@comment()\"/>\n\n<!-- The following is not used because of a bug in Mozilla :( -->\n<!--\n  <xsl:key name=\"kattPref\" match=\"@*\" \n   use=\"concat(generate-id(..), '|', substring-before(., ':'))\"/>\n-->  \n  <xsl:output method=\"html\"/>  \n  <xsl:template match=\"/\">    \n    <html xmlns=\"http://www.w3.org/1999/xhtml\">      \n      <head>        \n        <style>\n          .mozDss5 {\n            font-family: 'Verdana', sans-serif;\n            width: 100%;\n            margin: 0;\n            padding: 0;\n          }\n          \n          \n          .mozDss5 img {\n            float: left;\n            margin: 0.5em;\n          }\n          \n          .mozDss5 table {\n            border-spacing: 0;\n            margin: 0;\n            width:auto;\n          }\n          \n          .mozDss5 td {\n            padding: 0;\n            border:none;\n          }\n          \n          .mozDss5 .markup {\n            color: blue\n          }\n          \n          .mozDss5 .elemname {\n            color: #990000;\n          }\n          \n          .mozDss5 .attrname {\n            color: #990000;\n            font-weight: bold;\n          }\n          \n          .mozDss5 .namespace {\n            color: red;\n            font-weight: bold;\n          }\n          .mozDss5 .attrvalue {\n            color: black;\n            font-weight: bold;\n          }\n          \n          .mozDss5 .text {\n            color: black;\n            font-weight: bold;\n          }\n          \n          .mozDss5 .indent {\n            margin-left: 1em;\n          }\n          \n          .mozDss5 .comment {\n            color: #888888;\n            font-style: italic;\n          }\n          \n          .mozDss5 .pi {\n            color: blue;\n          }\n          \n          .mozDss5 .expander &gt; div {\n            width: 1em;\n          }\n          \n          .mozDss5 .expander {\n            cursor: default;\n            -moz-user-select: none;\n            vertical-align: top;\n            text-align: center;\n            margin: 0 0 0 -1em;\n          }\n          \n          .mozDss5 .expander-closed .expander-content {\n            display: none;\n          }\n          \n          .mozDss5 .se  {background-Color:yellow}\n        </style>        \n        <script>          \n          <xsl:comment><![CDATA[\n\nfunction clicked(event) {\n  try {\n\tvar thisNode = event.target;\n    var par = event.target.parentNode;\n    if (thisNode.nodeName == 'TD' && thisNode.className == 'expander') {\n      if (par.parentNode.className == 'expander-closed') {\n        par.parentNode.className = '';\n        event.target.data = '-';\n      }\n      else {\n        par.parentNode.className = 'expander-closed';\n        event.target.data = '+';\n      }\n    }\n  } catch (e) {\n  }\n}\n\n]]></xsl:comment>        \n        </script>      \n      </head>      \n      <body bgcolor=\"#E9FEFE\" ID=\"theBody\" title=\"{$scalarExpr}\" onclick=\"clicked(event) \">        \n        <xsl:apply-templates/>      \n      </body>    \n    </html>  \n  </xsl:template>  \n  \n  <xsl:template match=\"*\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <div class=\"indent\">      \n      <span class=\"markup\">&lt;</span>      \n      \n      <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>elemname</xsl:otherwise> \n      </xsl:choose>\n      </xsl:variable>     \n      \n      <span class=\"{$class}\">        \n        <xsl:value-of select=\"name(.)\"/>      \n      </span>\n      \n      <xsl:call-template name=\"findNamespace\"/>\n                       \n      <xsl:apply-templates select=\"@*\"/>      \n      <span class=\"markup\">/&gt;</span>    \n    </div>  \n  </xsl:template>  \n\n  <xsl:template match=\"*[text()]\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>elemname</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>     \n    \n    <div class=\"indent\">      \n      <span class=\"markup\">&lt;</span>      \n      <span class=\"{$class}\">        \n        <xsl:value-of select=\"name(.)\"/>      \n      </span>\n\n      <xsl:call-template name=\"findNamespace\"/>\n                       \n      <xsl:apply-templates select=\"@*\"/>      \n      <span class=\"markup\">&gt;</span>      \n      <!--<span class=\"text\">        \n        <xsl:value-of select=\".\"/>      -->\n        <xsl:apply-templates/>\n      <!--</span>-->      \n      <span class=\"markup\">&lt;/</span>      \n      <span class=\"elemname\">        \n        <xsl:value-of select=\"name(.)\"/>      \n      </span>      \n      <span class=\"markup\">&gt;</span>    \n    </div>  \n  </xsl:template>  \n  \n  <xsl:template match=\"*[* or processing-instruction() or comment()                           or string-length(text()) &gt; 50]\" priority=\"10\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>elemname</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>     \n    \n\n    <table class=\"mozDss5\">      \n      <tr>        \n        <td class=\"expander\">\n          -\n          <div/>        \n        </td>        \n        <td>          \n          <span class=\"markup\">&lt;</span>          \n          <span class=\"{$class}\">            \n            <xsl:value-of select=\"name(.)\"/>          \n          </span>          \n          <xsl:call-template name=\"findNamespace\"/>\n          <xsl:apply-templates select=\"@*\"/>          \n          <span class=\"markup\">&gt;</span>          \n          <div class=\"expander-content\">            \n            <xsl:apply-templates/>          \n          </div>          \n          <span class=\"markup\">&lt;/</span>          \n          <span class=\"elemname\">            \n            <xsl:value-of select=\"name(.)\"/>          \n          </span>          \n          <span class=\"markup\">&gt;</span>        \n        </td>      \n      </tr>    \n    </table>  \n  </xsl:template>  \n  <xsl:template match=\"@*\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n\n    <xsl:variable name=\"vPos\" select=\"position()\"/>\n    \n    <xsl:variable name=\"vPref\" select=\"substring-before(name(), ':')\"/>\n\n    <xsl:if test=\"$vPref                 and                    not(../@*[position() &lt; $vPos]                            [substring-before(name(), ':')                             = $vPref]                       )\">\n      <xsl:call-template name=\"findNamespace\"/>\n    </xsl:if>\n\n<!-- The following is not used because of a bug in Mozilla :( -->\n\n<!--\n    <xsl:if test=\n    \"generate-id() \n    = \n     generate-id(key('kattPref', \n                      concat(generate-id(..), '|', substring-before(., ':'))\n                     )[1]\n                )\">\n      <xsl:call-template name=\"findNamespace\"/>\n    </xsl:if>\n-->\n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>attrname</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <xsl:variable name=\"class2\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>markup</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <xsl:variable name=\"class3\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>attrvalue</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <xsl:text> </xsl:text>    \n    <span class=\"{$class}\">      \n      <xsl:value-of select=\"name(.)\"/>    \n    </span>    \n    <span class=\"{$class2}\">=\"</span>    \n    <span class=\"{$class3}\">      \n      <!-- <xsl:value-of select=\".\"/> -->    \n      <xsl:call-template name=\"replaceAmpersands\">\n        <xsl:with-param name=\"vString\" select=\"string(.)\"/>\n      </xsl:call-template>\n    </span>    \n    <span class=\"{$class2}\">\"</span>  \n  </xsl:template>  \n  \n  <xsl:template match=\"text()\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>text</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <span class=\"{$class}\">        \n      <!-- <xsl:value-of select=\".\"/>       -->\n      <xsl:call-template name=\"replaceAmpersands\">\n        <xsl:with-param name=\"vString\" select=\"string(.)\"/>\n      </xsl:call-template>\n    </span>    \n  </xsl:template>  \n  \n  <xsl:template match=\"processing-instruction()\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>indent pi</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <div class=\"{$class}\">\n\n      &lt;?\n      <xsl:value-of select=\"name(.)\"/>      \n      <xsl:text> </xsl:text>      \n      <xsl:value-of select=\".\"/>\n?&gt;\n    \n    </div>  \n  </xsl:template>  \n\n  <xsl:template match=\"processing-instruction()[string-length(.) &gt; 50]\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>pi</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <xsl:variable name=\"class2\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>indent expander-content</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <table>      \n      <tr>        \n        <td class=\"expander\">\n          -          \n          <div/>        \n        </td>        \n        <td class=\"{$class}\">\n\n          &lt;?\n          <xsl:value-of select=\"name(.)\"/>          \n          <div class=\"{$class2}\">            \n            <xsl:value-of select=\".\"/>          \n          </div>          \n          <xsl:text>?&gt;</xsl:text>        \n        </td>      \n      </tr>    \n    </table>  \n  </xsl:template>  \n\n  <xsl:template match=\"comment()\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>comment indent</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <div class=\"{$class}\">      \n      &lt;!--\n      <xsl:value-of select=\".\"/>\n      --&gt;    \n    </div>  \n  </xsl:template>  \n\n  <xsl:template match=\"comment()[string-length(.) &gt; 50]\">    \n    <xsl:variable name=\"belongs\" select=\"count($selectedNodes|.)-count($selectedNodes)\"/>\n    \n    <xsl:variable name=\"class\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>comment</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <xsl:variable name=\"class2\">\n      <xsl:choose>\n        <xsl:when test=\"$belongs = 0\">se</xsl:when>\n        <xsl:otherwise>indent expander-content</xsl:otherwise> \n      </xsl:choose>\n    </xsl:variable>\n    \n    <table>      \n      <tr>        \n        <td class=\"expander\">\n          -          \n          <div/>        \n        </td>        \n        <td class=\"{$class}\">          \n          &lt;!--            \n          <div class=\"{$class2}\">              \n            <xsl:value-of select=\".\"/>            \n          </div>          \n          --&gt;        \n        </td>      \n      </tr>    \n    </table>  \n  </xsl:template>\n  \n  <xsl:template name=\"findNamespace\">\n  \n    <xsl:variable name=\"vName\" select=\"substring-before(name(), ':')\"/>\n    <xsl:variable name=\"vUri\" select=\"namespace-uri(.)\"/>\n\n    <xsl:variable name=\"vAncestNamespace\">\n      <xsl:call-template name=\"findAncNamespace\">\n        <xsl:with-param name=\"pName\" select=\"$vName\"/>\n        <xsl:with-param name=\"pUri\" select=\"$vUri\"/>\n      </xsl:call-template>\n    </xsl:variable>\n\n    <xsl:if test=\"not(number($vAncestNamespace))\">\n      <xsl:if test=\"namespace-uri()                   or                     not(generate-id()                         =                          generate-id(../@*[name()                                           =                                            name(current())]                                     )                         )\">\n        <xsl:if test=\"parent::* or namespace-uri() or contains(name(), ':')\">\n          <xsl:text> </xsl:text>    \n          <span class=\"namespace\">      \n            <xsl:value-of select=\"'xmlns'\"/>\n            <xsl:if test=\"contains(name(), ':')\">\n              <xsl:value-of select=\"concat(':', $vName)\"/>\n            </xsl:if>\n          </span>    \n          <span class=\"markup\">=\"</span>    \n          <span class=\"namespace\">      \n            <xsl:value-of select=\"namespace-uri()\"/>    \n          </span>    \n          <span class=\"markup\">\"</span> \n        </xsl:if> \n      </xsl:if>\n    </xsl:if>\n  </xsl:template>\n  \n  <xsl:template name=\"findAncNamespace\">\n    <xsl:param name=\"pNode\" select=\".\"/>\n    <xsl:param name=\"pName\" select=\"substring-before(name(), ':')\"/>\n    <xsl:param name=\"pUri\" select=\"namespace-uri(.)\"/>\n   \n     <xsl:choose>\n      <xsl:when test=\"not($pNode/parent::*)                       and not($pName) and not($pUri)\">1</xsl:when>\n      <xsl:when test=\"not($pNode/parent::*)\">0</xsl:when>\n      <xsl:otherwise>\n        <xsl:variable name=\"vSamePrefs\" select=\"number($pName                       = substring-before(name($pNode/..), ':')                       )\"/>\n                      \n        <xsl:variable name=\"vSameUris\" select=\"number($pUri  = namespace-uri($pNode/..))\"/>\n                      \n        <xsl:choose>\n          <xsl:when test=\"$vSamePrefs and not($vSameUris)\">0</xsl:when>\n          <xsl:when test=\"not($vSamePrefs)\">\n            <xsl:call-template name=\"findAncNamespace\">\n              <xsl:with-param name=\"pNode\" select=\"$pNode/..\"/>\n              <xsl:with-param name=\"pName\" select=\"$pName\"/>\n              <xsl:with-param name=\"pUri\" select=\"$pUri\"/>\n            </xsl:call-template>\n          </xsl:when>\n           <xsl:otherwise>1</xsl:otherwise>\n        </xsl:choose>\n      </xsl:otherwise>\n    </xsl:choose>\n    \n  </xsl:template>\n  \n  <xsl:template name=\"replaceAmpersands\">\n    <xsl:param name=\"vString\"/>\n   \n   <xsl:variable name=\"vAmp\">&amp;</xsl:variable>\n   \n   <xsl:choose>\n   <xsl:when test=\"contains($vString, $vAmp)\">\n     <xsl:value-of select=\"substring-before($vString, $vAmp)\"/>\n     <xsl:value-of select=\"concat($vAmp, 'amp;')\"/>\n     <xsl:call-template name=\"replaceAmpersands\">\n       <xsl:with-param name=\"vString\" select=\"substring-after($vString, $vAmp)\"/>\n     </xsl:call-template>\n   </xsl:when>\n   <xsl:otherwise>\n     <xsl:value-of select=\"$vString\"/>\n   </xsl:otherwise>\n   </xsl:choose>\n   \n  </xsl:template>\n</xsl:stylesheet>\n"
